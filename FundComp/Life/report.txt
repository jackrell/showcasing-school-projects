report.txt - Life
Jack Rellinger
references for scenes - I used Conway's Game of Life Wikipedia to find patterns.

(1) From the user perspective, the program allows for the user to simulate Conway's game of life in two modes: interactive and batch mode, depending on the user entering a command line argument or not. If a command line argument is entered and a valid data file is the argument, the board initializes to the cells from the file and the animated simulation is ran till the user manually quits. In interactive mode, the user can add cells, remove cells, manually advance to the next stage of life, and quit. Everytime a command is entered in interactive mode, the updated board is displayed and the command menu is reprinted until the mode is quit or put in continuous play mode, in which case the animation stops when the user manually quits (cntrl c).

(2) From the programmer perspective, the main driver (playlife.c) first calls a function (from the function file lifefunc.c) to initialize an empty board(2D array of chars), then acts based on the command line arguments. If there is only 1, then the program runs in interactive mode (another function), where a while loop and a switch read the character input from the user, and each character calls a function. These functions either adds a cell (switches an empty character to an x in the 2D board array), removes a character (checks if a cell is an X and turns it to an empty space), advance the board based on the rules, or animate the board to play continuously. To advance the board, two functions are used. The first, applyRules, outlines the rules of life (depending on the number of neighbors) in an if statement. This function calls the function checkNeighbors, which uses another 2D array to apply the changes (-1 or +1) made to the row and column location from the space we are checking, then makes sure the neighbor space we are checking is in bounds before actually checking if the space is a dead or alive (X) cell. These functions are used repeatedly in the continousPlay function (called with p), which uses the sleep function and the clear to simulate animation as the board continously advances based on the rules. If there are two command line arguments, the batch mode is entered, which checks if the file name is valid, then reads add cell commands in until the file has a 'p', which enters continuous play with the cells activated from the file. When continous play is called, the program is stopped using a manual cntrl C command. If there are too many command line arguments (>2), the program terminates and prints an error. 

(3) I checked for accuracy by repeatedly compiling the program after I created each function, which allowed me to debug at intervals rather than be lost trying to debug the whole program at once. I also used the Conway's Game of Life wikipedia page to check that patterns I entered behaved as they should after writing the applyRules function. I also used print statements to make sure data read from the console and the file were accurately read. 
